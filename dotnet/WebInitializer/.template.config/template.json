{
  "$schema": "https://json.schemastore.org/template",
  "author": "Asier",
  "classifications": [
    "architecture"
  ],
  "identity": "web-host-init-configuration",
  "name": "Web Initializer",
  "description": "Crear configuraci√≥n base de diferentes servicios Web y configuraciones de auth, BBDD, etc.",
  "shortName": "Initialize web",
  "sourceName": "Template",
  "language": "C#",
  "preferNameDirectory": true,
  "tags": {
    "language": "C#",
    "type": "project"
  },
  "symbols": {
    "UseAzureOpts": {
      "type": "computed",
      "value": "(UseAzureKeyVault || UseAzureBlobStorage)"
    },
    // KeyVault Config
    "KeyVaults": {
      "type": "parameter",
      "datatype": "choice",
      "allowMultipleValues": true,
      "choices": [
        {
          "displayName": "Az Key Vault",
          "choice": "AzureKeyVault"
        }
      ],
      "defaultValue": "None",
      "displayName": "Secrets and Key Vault"
    },
    "UseAzureKeyVault": {
      "type": "computed",
      "value": "(KeyVaults == 'AzureKeyVault')"
    },
    "KeyVaultNone": {
      "type": "computed",
      "value": "(!UseAzureKeyVault)"
    },
    // Storage Config
    "Storage": {
      "type": "parameter",
      "datatype": "choice",
      //      "allowMultipleValues": true,
      "choices": [
        {
          "displayName": "None",
          "choice": "none"
        },
        {
          "displayName": "Az Blob Storage",
          "choice": "AzureBlobStorage"
        }
      ],
      "defaultValue": "none",
      "displayName": "File Storages"
    },
    "UseAzureBlobStorage": {
      "type": "computed",
      "value": "(Storage == 'AzureBlobStorage')"
    },
    "StorageNone": {
      "type": "computed",
      "value": "(!UseAzureBlobStorage)"
    },
    // Host Config
    "UseApi": {
      "displayName": "API",
      "type": "parameter",
      "datatype": "bool",
      "defaultValue": true
    },
    "UseGrpc": {
      "displayName": "GRPC",
      "type": "parameter",
      "datatype": "bool",
      "defaultValue": false
    },
    // Database Config
    "Database": {
      "type": "parameter",
      "datatype": "choice",
      "choices": [
        {
          "choice": "none",
          "displayName": "None"
        },
        {
          "choice": "postgresql",
          "displayName": "PostgreSQL"
        },
        {
          "choice": "azuresql",
          "displayName": "Azure SQL"
        },
        {
          "choice": "sqlserver",
          "displayName": "SQL Server"
        }
      ],
      "defaultValue": "postgresql"
    },
    "SqlDatabase": {
      "type": "computed",
      "value": "(UsePostgres || UseSqlServer || UseAzureSql)"
    },
    "UsePostgres": {
      "type": "computed",
      "value": "(Database == 'postgresql')"
    },
    "UseSqlServer": {
      "type": "computed",
      "value": "(Database == 'sqlserver')"
    },
    "UseAzureSql": {
      "type": "computed",
      "value": "(Database == 'azuresql')"
    },
    "DatabaseNone": {
      "type": "computed",
      "value": "(Database == 'none')"
    },
    // Auth Config
    "Authentication": {
      "type": "parameter",
      "datatype": "choice",
      "choices": [
        {
          "choice": "none",
          "description": "None"
        },
        {
          "choice": "jwt",
          "displayName": "JWT"
        },
        {
          "choice": "identity",
          "displayName": "Microsoft Identity"
        }
      ],
      "defaultValue": "none",
      "description": "Tipo de auth para usar"
    },
    "UseIdentity": {
      "type": "computed",
      "value": "(Authentication == 'identity')"
    },
    "UseJwt": {
      "type": "computed",
      "value": "(Authentication == 'jwt')"
    },
    "AuthNone": {
      "type": "computed",
      "value": "(Authentication == 'none')"
    },
    // Cache Config
    "Cache": {
      "type": "parameter",
      "datatype": "choice",
      "choices": [
        {
          "choice": "none",
          "description": "None"
        },
        {
          "choice": "memorycache",
          "displayName": "In Memory",
          "description": "Memory"
        },
        {
          "choice": "Redis",
          "displayName": "Redis",
          "description": "redis"
        },
        {
          "choice": "Garnet",
          "displayName": "Garnet",
          "description": "garnet"
        }
      ],
      "defaultValue": "memorycache",
      "description": "Cache"
    },
    "UseMemoryCache": {
      "type": "computed",
      "value": "(Cache == 'memorycache')"
    },
    "UseRedis": {
      "type": "computed",
      "value": "(Cache == 'redis')"
    },
    "UseGarnet": {
      "type": "computed",
      "value": "(Cache == 'garnet')"
    },
    // EventBus Config
    "EventBus": {
      "type": "parameter",
      "datatype": "choice",
      "allowMultipleValues": true,
      "choices": [
        {
          "choice": "memoryevents",
          "displayName": "In Memory"
        },
        {
          "choice": "azureservicebus",
          "displayName": "Azure Service Bus"
        },
        {
          "choice": "rabbit",
          "displayName": "Rabbit MQ"
        }
      ],
      "displayName": "Events",
      "defaultValue": "none"
    },
    "UseMemoryEvents": {
      "type": "computed",
      "value": "(EventBus == 'memoryevents')"
    },
    "UseAzServiceBus": {
      "type": "computed",
      "value": "(EventBus == 'azureservicebus')"
    },
    "UseRabbitMQ": {
      "type": "computed",
      "value": "(EventBus == 'rabbit')"
    },
    "EventBusNone": {
      "type": "computed",
      "value": "(!UseMemoryEvents && !UseAzServiceBus && !UseRabbitMQ)"
    },
    // Framework Config
    "Framework": {
      "type": "parameter",
      "description": "The target framework for the project.",
      "datatype": "choice",
      "choices": [
        {
          "choice": "net9.0"
        }
      ],
      "defaultValue": "net9.0"
    }
  },
  "sources": [
    {
      "source": "./",
      "target": "./",
      "exclude": [
        "**/[Bb]in/**",
        "**/[Oo]bj/**",
        "**/*template.config/**/*",
        "**/*.filelist",
        "**/*.user",
        "**/*idea",
        "*.sln",
        "**/Functionality/**/*"
      ],
      "modifiers": [
        {
          "condition": "(!UseAzureOpts)",
          "exclude": [
            "Template.HostWebApi/ConfigurationOptions/AzureOptions/*"
          ]
        },
        {
          "condition": "(!UseAzureBlobStorage)",
          "exclude": [
            "Infraestructure.Storages/AzureBlobStorage.cs",
            "Template.HostWebApi/ConfigurationOptions/AzureOptions/AzureBlobStorageOptions.cs"
          ]
        },
        {
          "condition": "(!UseAzureKeyVault)",
          "exclude": [
            "Template.HostWebApi/ConfigurationOptions/AzureOptions/AzureKeyVaultOptions.cs"
          ]
        },
        {
          "condition": "(StorageNone)",
          "exclude": [
            "Infraestructure.Storages/*"
          ]
        },
        {
          "condition": "(AuthNone)",
          "exclude": [
            "Template.HostWebApi/JwtManagement/*",
            "Infraestructure.Database/Entities/*",
            "Infraestructure.Database/Repository/UserInfo.cs",
            "Infraestructure.Database/EntityConfiguration/*",
            "Shared/JWT/*"
          ]
        },
        {
          "condition": "(UseIdentity)",
          "exclude": [
            "Template.HostWebApi/JwtManagement/*",
            "Shared/JWT/*"
          ]
        },
        {
          "condition": "(UseJwt)",
          "exclude": [
            "Infraestructure.Database/Entities/RoleEntity.cs"
          ],
          "rename": {
          }
        },
        {
          "condition": "(!UseJwt)",
          "exclude": [
            "Template.HostWebApi/ConfigurationOptions/JwtOption.cs",
            "Infraestructure.Database/Entities/UserJwtTokensEntity.cs"
          ],
          "rename": {
          }
        },
        {
          "condition": "(!UseApi)",
          "exclude": [
          ],
          "rename": {
          }
        },
        {
          "condition": "(!UseGrpc)",
          "exclude": [
          ],
          "rename": {
          }
        },
        {
          "condition": "(!SqlDatabase && !UseIdentity)",
          "exclude": [
            "Infraestructure.Database/EntityConfiguration/*",
            "Infraestructure.Database/DatabaseContext.cs",
            "Template.HostWebApi/HostedServices/MigrationHostedService.cs"
          ]
        },
        {
          "condition": "DatabaseNone && (AuthNone || UseJwt)",
          "exclude": [
            "**/Infraestructure.Database/**/*"
          ]
        },
        {
          "condition": "EventBusNone",
          "exclude": [
            "**/Infraestructure.Events/**/*"
          ]
        },
        {
          "condition": "!UseMemoryEvents",
          "exclude": [
            "Infraestructure.Events/Handlers/*",
            "Infraestructure.Events/IEventConsumer.cs",
            "Infraestructure.Events/ConsumerService.cs",
            "Infraestructure.Events/Publisher/MemoryEventNotificator.cs"
          ]
        },
        {
          "condition": "!UseAzServiceBus",
          "exclude": [
            "Infraestructure.Events/Publisher/AzureEventNotificator.cs"
          ]
        },
        {
          "condition": "!UseRabbitMQ",
          "exclude": [
            "Infraestructure.Events/Publisher/RabbitEventNotificator.cs"
          ]
        }
      ]
    }
  ]
}