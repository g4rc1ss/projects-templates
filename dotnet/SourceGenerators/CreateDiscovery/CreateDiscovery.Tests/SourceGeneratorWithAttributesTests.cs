using CreateDiscovery.Abstractions;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.Extensions.DependencyInjection;
using Xunit;

namespace CreateDiscovery.Tests;

public class SourceGeneratorWithAttributesTests
{
    private const string METHOD_SOURCE = $$"""
        namespace CreateDiscovery.Sample;

        public static partial class ServiceExtensions
        {
            [Abstractions.Discover]
            public static partial void AddDependencies(this Microsoft.Extensions.DependencyInjection.IServiceCollection services);
        }
        """;

    private const string EXPECTED_GENERATED_TEXT = $$"""
        // <auto-generated/>
        using Microsoft.Extensions.DependencyInjection;

        namespace CreateDiscovery.Sample;

        public static partial class ServiceExtensions
        {
            public static partial void AddDependencies(this IServiceCollection services)
            {
            }
        }
        """;

    [Fact]
    public void GenerateReportMethod()
    {
        CreateDiscoveryGenerator generator = new();

        CSharpGeneratorDriver driver = CSharpGeneratorDriver.Create(generator);

        CSharpCompilation compilation = CSharpCompilation.Create(
            nameof(SourceGeneratorWithAttributesTests),
            [CSharpSyntaxTree.ParseText(METHOD_SOURCE)],
            [
                // To support 'System.Attribute' inheritance, add reference to 'System.Private.CoreLib'.
                MetadataReference.CreateFromFile(typeof(object).Assembly.Location),
                MetadataReference.CreateFromFile(typeof(DiscoverAttribute).Assembly.Location),
                MetadataReference.CreateFromFile(typeof(IServiceCollection).Assembly.Location),
            ]
        );

        GeneratorDriverRunResult runResult = driver.RunGenerators(compilation).GetRunResult();

        SyntaxTree generatedFileSyntax = runResult.GeneratedTrees.Single(t =>
            t.FilePath.EndsWith("archivo.g.cs")
        );

        string generatedText = generatedFileSyntax.ToString();
        Assert.Equal(
            EXPECTED_GENERATED_TEXT,
            generatedText,
            ignoreCase: true,
            ignoreLineEndingDifferences: true,
            ignoreWhiteSpaceDifferences: true
        );
    }
}
