using CreateDiscovery.Abstractions;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace CreateDiscovery;

[Generator]
public class CreateDiscoveryGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        Console.WriteLine("CreateDiscoveryGenerator");

        IncrementalValuesProvider<IMethodSymbol?> methodSymbol =
            context.SyntaxProvider.CreateSyntaxProvider(
                (node, _) => node is MethodDeclarationSyntax,
                (syntaxContext, _) => GetMethodSymbol(syntaxContext)
            );

        GenerateCode(context, methodSymbol);
    }

    private static IMethodSymbol? GetMethodSymbol(GeneratorSyntaxContext syntaxContext)
    {
        if (
            syntaxContext.SemanticModel.GetDeclaredSymbol(syntaxContext.Node)
            is not IMethodSymbol methodSymbol
        )
        {
            return null;
        }

        bool hasAttribute = methodSymbol
            .GetAttributes()
            .Any(x => x.AttributeClass?.Name == nameof(DiscoverAttribute));

        return hasAttribute ? methodSymbol : null;
    }

    private void GenerateCode(
        IncrementalGeneratorInitializationContext context,
        IncrementalValuesProvider<IMethodSymbol?> methodSymbol
    )
    {
        context.RegisterSourceOutput(
            methodSymbol,
            (productionContext, symbol) =>
            {
                if (symbol is null)
                {
                    return;
                }

                string sourceCode = $$"""
                // <auto-generated/>
                using Microsoft.Extensions.DependencyInjection;

                namespace {{symbol.ContainingNamespace.ToDisplayString()}};

                public static partial class ServiceExtensions
                {
                    public static partial void {{symbol.Name}}(this IServiceCollection services)
                    {
                    }
                }
                """;

                productionContext.AddSource("archivo.g.cs", sourceCode);
            }
        );
    }
}
