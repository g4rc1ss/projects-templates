{
  "$schema": "http://json.schemastore.org/template",
  "author": "Asier",
  "classifications": [
    "architecture"
  ],
  "identity": "frontend-desktop-template",
  "name": "Asier Avalonia Desktop",
  "description": "Template para aplicaciones Desktop",
  "shortName": "Front Desktop App",
  "sourceName": "FrontAvaloniaDesktop",
  "language": "C#",
  "preferNameDirectory": true,
  "tags": {
    "language": "C#",
    "type": "project"
  },
  "symbols": {
    "UseAzureOpts": {
      "type": "computed",
      "value": "(UseAzureKeyVault || UseAzureBlobStorage)"
    },
    // Storage Config
    "Storage": {
      "type": "parameter",
      "datatype": "choice",
      "choices": [
        {
          "displayName": "None",
          "choice": "none"
        },
        {
          "displayName": "Local System Storage",
          "choice": "LocalSystemStorage"
        }
      ],
      "defaultValue": "none",
      "displayName": "File Storages"
    },
    "UseLocalStorage": {
      "type": "computed",
      "value": "(Storage == 'LocalSystemStorage')"
    },
    "StorageNone": {
      "type": "computed",
      "value": "(!UseAzureBlobStorage && !UseLocalStorage)"
    },
    // Host Config
    "UseAndroid": {
      "displayName": "Android",
      "type": "parameter",
      "datatype": "bool",
      "defaultValue": false
    },
    "UseDesktop": {
      "displayName": "Desktop",
      "type": "parameter",
      "datatype": "bool",
      "defaultValue": true
    },
    "UseIOS": {
      "displayName": "IOS",
      "type": "parameter",
      "datatype": "bool",
      "defaultValue": false
    },
    // Database Config
    "SqlDatabases": {
      "type": "parameter",
      "datatype": "choice",
      "choices": [
        {
          "choice": "none",
          "displayName": "None"
        },
        {
          "choice": "postgresql",
          "displayName": "PostgreSQL"
        }
      ],
      "defaultValue": "postgresql"
    },
    "SqlDatabase": {
      "type": "computed",
      "value": "(UsePostgres || UseSqlServer || UseAzureSql)"
    },
    "UsePostgres": {
      "type": "computed",
      "value": "(SqlDatabases == 'postgresql')"
    },
    "DatabaseNone": {
      "type": "computed",
      "value": "(!SqlDatabase && !NoSqlDatabase)"
    },
    // Auth Config
    // Cache Config
    "Cache": {
      "type": "parameter",
      "datatype": "choice",
      "choices": [
        {
          "choice": "none",
          "description": "None"
        },
        {
          "choice": "memorycache",
          "displayName": "In Memory",
          "description": "Memory"
        }
      ],
      "defaultValue": "memorycache",
      "description": "Cache"
    },
    "UseMemoryCache": {
      "type": "computed",
      "value": "(Cache == 'memorycache')"
    },
    // EventBus Config
    "EventBus": {
      "type": "parameter",
      "datatype": "choice",
      "allowMultipleValues": true,
      "choices": [
        {
          "choice": "memoryevents",
          "displayName": "In Memory"
        }
      ],
      "defaultValue": "none",
      "displayName": "Events"
    },
    "UseMemoryEvents": {
      "type": "computed",
      "value": "(EventBus == 'memoryevents')"
    },
    "EventBusNone": {
      "type": "computed",
      "value": "(!UseMemoryEvents && !UseAzServiceBus && !UseRabbitMQ)"
    },
    // Framework Config
    "Framework": {
      "type": "parameter",
      "description": "The target framework for the project.",
      "datatype": "choice",
      "choices": [
        {
          "choice": "net9.0"
        }
      ],
      "defaultValue": "net9.0"
    }
  },
  "sources": [
    {
      "source": "../Libs",
      "target": "./",
      "exclude": [
        "**/[Bb]in/**",
        "**/[Oo]bj/**",
        "**/*template.config/**/*",
        "**/*.filelist",
        "**/*.user",
        "**/*idea",
        "*.sln",
        "**/Functionality/**/*"
      ],
      "modifiers": [
        // Storages
        {
          "condition": "(!UseLocalStorage)",
          "exclude": [
            "Infraestructure.Storages/LocalStorage.cs"
          ]
        },
        {
          "condition": "(!UseAzureBlobStorage)",
          "exclude": [
            "Infraestructure.Storages/AzureStorage/AzureBlobStorage.cs",
            "Infraestructure.Storages/AzureStorage/AzureBlobStorageOptions.cs"
          ]
        },
        {
          "condition": "(StorageNone)",
          "exclude": [
            "Infraestructure.Storages/*"
          ]
        },
        // Events
        {
          "condition": "EventBusNone",
          "exclude": [
            "**/Infraestructure.Events/**/*"
          ]
        },
        {
          "condition": "!UseMemoryEvents",
          "exclude": [
            "Infraestructure.Events/Handlers/*",
            "Infraestructure.Events/IEventConsumer.cs",
            "Infraestructure.Events/ConsumerService.cs",
            "Infraestructure.Events/Publisher/MemoryEventNotificator.cs"
          ]
        },
        {
          "condition": "!UseAzServiceBus",
          "exclude": [
            "Infraestructure.Events/Publisher/AzureEventNotificator.cs"
          ]
        },
        {
          "condition": "!UseRabbitMQ",
          "exclude": [
            "Infraestructure.Events/Publisher/RabbitEventNotificator.cs"
          ]
        },
        // Database
        {
          "condition": "(!UseIdentity)",
          "exclude": [
            "Infraestructure.Database/Entities/IdentityRoleEntity.cs",
            "Infraestructure.Database/Entities/IdentityUserEntity.cs",
            "Infraestructure.Database/Repository/IdentityUserPoc.cs",
            "Infraestructure.Database/IdentityDatabaseContext.cs"
          ]
        },
        {
          "condition": "(!SqlDatabase || UseIdentity)",
          "exclude": [
            "Infraestructure.Database/Entities/UserEntity.cs",
            "Infraestructure.Database/EntityConfiguration/UserEntityConfiguration.cs",
            "Infraestructure.Database/Repository/SqlUserPoc.cs",
            "Infraestructure.Database/DatabaseContext.cs"
          ]
        },
        {
          "condition": "!UseMongodb",
          "exclude": [
            "Infraestructure.Database/Repository/MongoPoc.cs",
            "Infraestructure.Database/Entities/MongoDbEntity.cs"
          ]
        },
        {
          "condition": "DatabaseNone && (!UseIdentity)",
          "exclude": [
            "**/Infraestructure.Database/**/*"
          ]
        }
      ]
    },
    {
      "source": "./",
      "target": "./",
      "exclude": [
        "**/[Bb]in/**",
        "**/[Oo]bj/**",
        "**/*template.config/**/*",
        "**/*.filelist",
        "**/*.user",
        "**/*idea",
        "*.sln",
        "**/Functionality/**/*"
      ],
      "modifiers": [
        {
          "condition": "(!UseAzureOpts)",
          "exclude": [
            "Template.HostWebApi/ConfigurationOptions/AzureOptions/*"
          ]
        },
        {
          "condition": "(!UseAzureKeyVault)",
          "exclude": [
            "Template.HostWebApi/ConfigurationOptions/AzureOptions/AzureKeyVaultOptions.cs"
          ]
        },
        {
          "condition": "(!SqlDatabase && !UseIdentity)",
          "exclude": [
            "Template.HostWebApi/HostedServices/MigrationHostedService.cs"
          ]
        },
        {
          "condition": "(!UseApi)",
          "exclude": [
          ],
          "rename": {
          }
        },
        {
          "condition": "(!UseGrpc)",
          "exclude": [
          ],
          "rename": {
          }
        }
      ]
    }
  ]
}