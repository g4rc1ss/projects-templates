{
  "$schema": "http://json.schemastore.org/template",
  "author": "Asier",
  "classifications": [
    "Architecture",
    "Template",
    "csharp",
    "Web"
  ],
  "identity": "Completed Web App",
  "name": "Asier Web",
  "description": "Crear configuraci√≥n base de diferentes servicios Web y configuraciones de auth, BBDD, etc.",
  "shortName": "asier.web.complete",
  "sourceName": "CompletedWeb",
  "language": "C#",
  "preferNameDirectory": true,
  "tags": {
    "language": "C#",
    "type": "solution",
    "editorTreatAs": "solution"
  },
  "symbols": {
    "UseLayerArchitecture": {
      "displayName": "Use Layer Architecture",
      "type": "parameter",
      "datatype": "bool",
      "defaultValue": false,
      "description": "Use a Custom Architecture for Web Development"
    },
    "UseAzureOpts": {
      "type": "computed",
      "value": "(UseAzureKeyVault || UseAzureBlobStorage)"
    },
    // KeyVault Config
    "KeyVaults": {
      "type": "parameter",
      "datatype": "choice",
      "allowMultipleValues": true,
      "choices": [
        {
          "displayName": "Az Key Vault",
          "choice": "AzureKeyVault"
        }
      ],
      "defaultValue": "None",
      "displayName": "Secrets and Key Vault"
    },
    "UseAzureKeyVault": {
      "type": "computed",
      "value": "(KeyVaults == 'AzureKeyVault')"
    },
    "KeyVaultNone": {
      "type": "computed",
      "value": "(!UseAzureKeyVault)"
    },
    // Storage Config
    "Storage": {
      "type": "parameter",
      "datatype": "choice",
      //      "allowMultipleValues": true,
      "choices": [
        {
          "displayName": "None",
          "choice": "none"
        },
        {
          "displayName": "Az Blob Storage",
          "choice": "AzureBlobStorage"
        },
        {
          "displayName": "Local System Storage",
          "choice": "LocalSystemStorage"
        }
      ],
      "defaultValue": "none",
      "displayName": "File Storages"
    },
    "UseAzureBlobStorage": {
      "type": "computed",
      "value": "(Storage == 'AzureBlobStorage')"
    },
    "UseLocalStorage": {
      "type": "computed",
      "value": "(Storage == 'LocalSystemStorage')"
    },
    "StorageNone": {
      "type": "computed",
      "value": "(!UseAzureBlobStorage && !UseLocalStorage)"
    },
    // Host Config
    "UseApi": {
      "displayName": "API",
      "type": "parameter",
      "datatype": "bool",
      "defaultValue": true
    },
    "UseGrpc": {
      "displayName": "GRPC",
      "type": "parameter",
      "datatype": "bool",
      "defaultValue": false
    },
    // Database Config
    "Databases": {
      "type": "parameter",
      "datatype": "choice",
      "choices": [
        {
          "choice": "none",
          "displayName": "None"
        },
        {
          "choice": "postgresql",
          "displayName": "PostgreSQL"
        },
        {
          "choice": "azuresql",
          "displayName": "Azure SQL"
        },
        {
          "choice": "sqlserver",
          "displayName": "SQL Server"
        },
        {
          "choice": "sqlite",
          "displayName": "SQLite"
        },
        {
          "choice": "mongodb",
          "displayName": "Mongo Database"
        },
        {
          "choice": "litedb",
          "displayName": "LiteDB"
        },
        {
          "choice": "cosmosdb",
          "displayName": "Azure Cosmos DB"
        }
      ],
      "defaultValue": "postgresql"
    },
    "SqlDatabase": {
      "type": "computed",
      "value": "(UsePostgres || UseSqlServer || UseAzureSql || UseSqlite)"
    },
    "UsePostgres": {
      "type": "computed",
      "value": "(Databases == 'postgresql' || ((DatabaseNone || NoSqlDatabase) && UseIdentity))"
    },
    "UseSqlServer": {
      "type": "computed",
      "value": "(Databases == 'sqlserver')"
    },
    "UseAzureSql": {
      "type": "computed",
      "value": "(Databases == 'azuresql')"
    },
    "UseAzureCosmos": {
      "type": "computed",
      "value": "(Databases == 'cosmosdb')"
    },
    "UseSqlite": {
      "type": "computed",
      "value": "(Databases == 'sqlite')"
    },
    "NoSqlDatabase": {
      "type": "computed",
      "value": "(UseMongodb || UseAzureCosmos || UseLitedb)"
    },
    "UseMongodb": {
      "type": "computed",
      "value": "(Databases == 'mongodb')"
    },
    "UseLitedb": {
      "type": "computed",
      "value": "(Databases == 'litedb')"
    },
    "DatabaseNone": {
      "type": "computed",
      "value": "(Databases == 'none')"
    },
    // Auth Config
    "Authentication": {
      "type": "parameter",
      "datatype": "choice",
      "choices": [
        {
          "choice": "none",
          "description": "None"
        },
        {
          "choice": "identity",
          "displayName": "Microsoft Identity"
        },
        {
          "choice": "jwt",
          "displayName": "JWT"
        }
      ],
      "defaultValue": "none",
      "description": "Tipo de auth para usar"
    },
    "UseIdentity": {
      "type": "computed",
      "value": "(Authentication == 'identity')"
    },
    "UseJwt": {
      "type": "computed",
      "value": "(Authentication == 'jwt')"
    },
    "AuthNone": {
      "type": "computed",
      "value": "(Authentication == 'none')"
    },
    // Cache Config
    "Cache": {
      "type": "parameter",
      "datatype": "choice",
      "choices": [
        {
          "choice": "none",
          "description": "None"
        },
        {
          "choice": "memorycache",
          "displayName": "In Memory"
        },
        {
          "choice": "Redis",
          "displayName": "Redis"
        },
        {
          "choice": "Garnet",
          "displayName": "Garnet"
        }
      ],
      "defaultValue": "memorycache",
      "description": "Cache"
    },
    "UseMemoryCache": {
      "type": "computed",
      "value": "(Cache == 'memorycache')"
    },
    "UseDistributedCache": {
      "type": "computed",
      "value": "(UseRedis || UseGarnet)"
    },
    "UseRedis": {
      "type": "computed",
      "value": "(Cache == 'redis')"
    },
    "UseGarnet": {
      "type": "computed",
      "value": "(Cache == 'garnet')"
    },
    "UseCache": {
      "type": "computed",
      "value": "(UseMemoryCache || UseDistributedCache)"
    },
    // EventBus Config
    "EventBus": {
      "type": "parameter",
      "datatype": "choice",
      "allowMultipleValues": true,
      "choices": [
        {
          "choice": "memoryevents",
          "displayName": "In Memory"
        },
        {
          "choice": "azureservicebus",
          "displayName": "Azure Service Bus"
        },
        {
          "choice": "rabbit",
          "displayName": "Rabbit MQ"
        }
      ],
      "defaultValue": "none",
      "displayName": "Events"
    },
    "UseMemoryEvents": {
      "type": "computed",
      "value": "(EventBus == 'memoryevents')"
    },
    "UseAzServiceBus": {
      "type": "computed",
      "value": "(EventBus == 'azureservicebus')"
    },
    "UseRabbitMQ": {
      "type": "computed",
      "value": "(EventBus == 'rabbit')"
    },
    "EventBusNone": {
      "type": "computed",
      "value": "(!UseMemoryEvents && !UseAzServiceBus && !UseRabbitMQ)"
    }
  },
  "sources": [
    {
      "source": "../../",
      "target": "./",
      "include": [
        "*editorconfig",
        "*csharpierrc.json",
        "Directory.Build.props",
        "Directory.Packages.props",
        "RemoveUnusedDuplicatePackages.ps1"
      ]
    },
    {
      "source": "./",
      "target": "./",
      "exclude": [
        "**/[Bb]in/**",
        "**/[Oo]bj/**",
        "**/*template.config/**/*",
        "**/*.filelist",
        "**/*.user",
        "**/*idea/**/*"
      ],
      "modifiers": [
        {
          "condition": "(!UseAzureOpts)",
          "exclude": [
            "CompletedWeb.HostWebApi/ConfigurationOptions/AzureOptions/*"
          ]
        },
        {
          "condition": "(!UseAzureKeyVault)",
          "exclude": [
            "CompletedWeb.HostWebApi/ConfigurationOptions/AzureOptions/AzureKeyVaultOptions.cs"
          ]
        },
        {
          "condition": "(!UseApi)",
          "exclude": [
            "src/CompletedWeb.API/**/*"
          ],
          "rename": {
          }
        },
        {
          "condition": "(!UseGrpc)",
          "exclude": [
            "src/CompletedWeb.Grpc/**/*"
          ],
          "rename": {
          }
        },
        {
          "condition": "(!UseLayerArchitecture)",
          "exclude": [
            "src/**/*"
          ]
        },
        {
          "condition": "UseLayerArchitecture",
          "exclude": [
            "Shared/*"
          ]
        },
        // Cache
        {
          "condition": "(!UseCache)",
          "exclude": [
            "infra/Infraestructure.Caching/**/*"
          ]
        },
        {
          "condition": "(!UseMemoryCache)",
          "exclude": [
            "infra/Infraestructure.Caching/CacheImplementation/MemoryCaching.cs"
          ]
        },
        {
          "condition": "(!UseDistributedCache)",
          "exclude": [
            "infra/Infraestructure.Caching/CacheImplementation/DistributedCaching.cs"
          ]
        },
        // Storages
        {
          "condition": "(!UseLocalStorage)",
          "exclude": [
            "infra/Infraestructure.Storages/LocalStorage.cs"
          ]
        },
        {
          "condition": "(!UseAzureBlobStorage)",
          "exclude": [
            "infra/Infraestructure.Storages/AzureStorage/AzureBlobStorage.cs",
            "infra/Infraestructure.Storages/AzureStorage/AzureBlobStorageOptions.cs"
          ]
        },
        {
          "condition": "(StorageNone)",
          "exclude": [
            "infra/Infraestructure.Storages/*"
          ]
        },
        // Events
        {
          "condition": "EventBusNone",
          "exclude": [
            "**/infra/Infraestructure.Events/**/*"
          ]
        },
        {
          "condition": "!UseMemoryEvents",
          "exclude": [
            "infra/Infraestructure.Events/Handlers/*",
            "infra/Infraestructure.Events/IEventConsumer.cs",
            "infra/Infraestructure.Events/ConsumerService.cs",
            "infra/Infraestructure.Events/Publisher/MemoryEventNotificator.cs"
          ]
        },
        {
          "condition": "!UseAzServiceBus",
          "exclude": [
            "infra/Infraestructure.Events/Publisher/AzureEventNotificator.cs"
          ]
        },
        {
          "condition": "!UseRabbitMQ",
          "exclude": [
            "infra/Infraestructure.Events/Publisher/RabbitEventNotificator.cs"
          ]
        },
        // Auth
        {
          "condition": "AuthNone",
          "exclude": [
            "infra/Infraestructure.Auth/*"
          ]
        },
        {
          "condition": "!UseJwt",
          "exclude": [
            "infra/Infraestructure.Auth/JwtManager/**/*"
          ]
        },
        // Database
        {
          "condition": "(!UseIdentity)",
          "exclude": [
            "infra/Infraestructure.Database/Entities/IdentityRoleEntity.cs",
            "infra/Infraestructure.Database/Entities/IdentityUserEntity.cs",
            "infra/Infraestructure.Database/Repository/IdentityUserPoc.cs",
            "infra/Infraestructure.Database/IdentityDatabaseContext.cs"
          ]
        },
        {
          "condition": "(!SqlDatabase && !UseIdentity)",
          "exclude": [
            "infra/Infraestructure.Database/MigrationHostedService.cs"
          ]
        },
        {
          "condition": "(!SqlDatabase || UseIdentity)",
          "exclude": [
            "infra/Infraestructure.Database/Entities/UserEntity.cs",
            "infra/Infraestructure.Database/EntityConfiguration/UserEntityConfiguration.cs",
            "infra/Infraestructure.Database/Repository/SqlUserPoc.cs",
            "infra/Infraestructure.Database/DatabaseContext.cs"
          ]
        },
        {
          "condition": "(!UseMongodb)",
          "exclude": [
            "infra/Infraestructure.Database/Repository/MongoPoc.cs",
            "infra/Infraestructure.Database/Entities/MongoDbEntity.cs"
          ]
        },
        {
          "condition": "(!UseLitedb)",
          "exclude": [
            "infra/Infraestructure.Database/Repository/LitedbPoc.cs",
            "infra/Infraestructure.Database/Entities/LiteDbEntity.cs"
          ]
        },
        {
          "condition": "DatabaseNone && (!UseIdentity)",
          "exclude": [
            "**/infra/Infraestructure.Database/**/*"
          ]
        },
        {
          "condition": "(!UseAzureCosmos)",
          "exclude": [
            "infra/Infraestructure.Database/Repository/CosmosdbPoc.cs",
            "infra/Infraestructure.Database/Entities/CosmosDbEntity.cs"
          ]
        }
      ]
    }
  ],
  "primaryOutputs": [
    {
      "path": "CompletedWeb.HostWebApi/Program.cs"
    }
  ],
  "postActions": [
    {
      "id": "build",
      "actionId": "3A7C4B45-1F5D-4A30-959A-51B88E82B5D2",
      "description": "Build project.",
      "args": {
        "executable": "dotnet",
        "args": "build",
        "redirectStandardOutput": true,
        "redirectStandardError": true
      },
      "manualInstructions": [
        {
          "text": "Run 'dotnet build'"
        }
      ],
      "continueOnError": true
    },
    {
      "id": "editor",
      "actionId": "84C0DA21-51C8-4541-9940-6CA19AF04EE6",
      "condition": "(HostIdentifier != \"dotnetcli\")",
      "description": "",
      "manualInstructions": [],
      "args": {
        "files": "0"
      },
      "continueOnError": true
    }
  ]
}